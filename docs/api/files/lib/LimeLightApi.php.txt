<?php

include_once 'Api.php';
include_once 'Config.php';
include_once './exceptions/FailedToConnectException.php';
include_once './exceptions/RequestMethodNotFoundException.php';
include_once './exceptions/ApiCallFailedException.php';

/**
 * For interacting with Limelight CRM api
 */

class LimeLightApi extends Api {
    /**
     * @var
     */
    private $config;

    /**
     * @var
     */
    private $requestData;

    /**
     * @param Config $config - api configuration implementation of Limelight
     */
    public function __construct(Config $config = null) {
        $this->config = $config;
    }

    public function __get($prop) {
        return $this->{$prop};
    }
    public function __set($prop, $value = null) {
        $this->{$prop} = $value;
    }

    /**
     * @return mixed
     * @throws FailedToConnectException
     * @throws RequestMethodNotFoundException
     */
    public function connect() {

        if (!$this->hasRequestMethod()) {
            throw new RequestMethodNotFoundException('Request Method Not Found');
        }

        $this->requestData['username'] = $this->config->user;
        $this->requestData['password'] = $this->config->key;

        try {
            $curlSession = curl_init();
            curl_setopt($curlSession, CURLOPT_URL, $this->config->url);
            curl_setopt($curlSession, CURLOPT_HEADER, 0);
            curl_setopt($curlSession, CURLOPT_POST, 1);
            curl_setopt($curlSession, CURLOPT_POSTFIELDS, http_build_query($this->requestData));
            curl_setopt($curlSession, CURLOPT_RETURNTRANSFER,1);
            curl_setopt($curlSession, CURLOPT_TIMEOUT,5000);
            curl_setopt($curlSession, CURLOPT_SSL_VERIFYPEER, FALSE);
            curl_setopt($curlSession, CURLOPT_SSL_VERIFYHOST, 2);

            $response = curl_exec($curlSession);

            // Check that a connection was made
            if (curl_error($curlSession)){
                throw new ApiCallFailedException('Api Call Failed');
            }

            curl_close ($curlSession);
            return $response;

        }catch (Exception $e) {
            throw new FailedToConnectException('Failed to connect to the api');
        }
    }

    /**
     * @return bool - check if api parameters includes method field
     */
    private function hasRequestMethod() {
        return array_key_exists('method', $this->requestData);
    }
}
